name: CI | Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build -t dorfnew/ai-api-sdxl:dev .

      - name: Push Docker image (for main branch)
        if: github.ref == 'refs/heads/main'
        run: |
          docker push dorfnew/ai-api-sdxl:dev

      - name: Verify API Key Permissions
        id: verify
        uses: fjogeleit/http-request-action@v1
        env:
          RUNPOD_API_KEY: ${{ secrets.RUNPOD_API_KEY }}
        with:
          url: https://api.runpod.io/graphql?api_key=${{ env.RUNPOD_API_KEY }}
          method: POST
          customHeaders: '{"Content-Type": "application/json"}'
          data: |
            {
              "query": "query { myself { id } }"
            }
        continue-on-error: false

      - name: Test Pod Mutation Access
        id: test-mutation
        uses: fjogeleit/http-request-action@v1
        env:
          RUNPOD_API_KEY: ${{ secrets.RUNPOD_API_KEY }}
        with:
          url: https://api.runpod.io/graphql?api_key=${{ env.RUNPOD_API_KEY }}
          method: POST
          customHeaders: '{"Content-Type": "application/json"}'
          data: |
            {
              "query": "mutation { podFindAndDeployOnDemand(input: { cloudType: SECURE, name: \"test-access\", gpuTypeId: \"NVIDIA GeForce RTX 4090\", imageName: \"nvidia/cuda:11.0-base\", gpuCount: 1, containerDiskInGb: 10, volumeInGb: 0, minVcpuCount: 2, minMemoryInGb: 8 }) { id status } }"
            }
        continue-on-error: true

      - name: Log Mutation Test Result (Debug)
        if: steps.test-mutation.outcome == 'failure'
        run: |
          echo "❌ Mutation test failed - Check API key scopes and response"
          echo "Response: ${{ steps.test-mutation.outputs.response }}"

      - name: Create and Start RunPod Pod
        id: pod
        if: steps.test-mutation.outcome == 'success'
        uses: fjogeleit/http-request-action@v1
        env:
          RUNPOD_API_KEY: ${{ secrets.RUNPOD_API_KEY }}
        with:
          url: https://api.runpod.io/graphql?api_key=${{ env.RUNPOD_API_KEY }}
          method: POST
          customHeaders: '{"Content-Type": "application/json"}'
          data: |
            {
              "query": "mutation { podFindAndDeployOnDemand(input: { cloudType: SECURE, name: \"sdxl-test-pod-${{ github.run_id }}\", imageName: \"dorfnew/ai-api-sdxl:dev\", gpuCount: 1, gpuTypeId: \"NVIDIA GeForce RTX 4090\", containerDiskInGb: 80, volumeInGb: 0, minVcpuCount: 6, minMemoryInGb: 36, ports: [\"8080/http\"], env: [{key: \"HF_TOKEN\", value: \"${{ secrets.HF_TOKEN }}\"}]}) { id status message errors } }"
            }

      - name: Extract Pod ID
        id: extract
        if: steps.pod.outcome == 'success'
        run: |
          POD_ID=$(echo '${{ steps.pod.outputs.response }}' | jq -r '.data.podFindAndDeployOnDemand.id')
          echo "POD_ID=$POD_ID" >> $GITHUB_ENV
          RESPONSE=$(echo '${{ steps.pod.outputs.response }}')
          if [[ "$RESPONSE" == *"errors"* ]]; then
            echo "❌ Pod creation failed: $RESPONSE"
            exit 1
          fi

      - name: Wait for Pod to Start
        if: env.POD_ID != ''
        run: |
          POD_ID="${{ env.POD_ID }}"
          RUNPOD_API_KEY="${{ secrets.RUNPOD_API_KEY }}"
          STATUS="CREATING"
          COUNTER=0
          MAX_WAIT=600
          while [ "$STATUS" != "RUNNING" ] && [ $COUNTER -lt $MAX_WAIT ]; do
            RESPONSE=$(curl -s -H "Content-Type: application/json" "https://api.runpod.io/graphql?api_key=$RUNPOD_API_KEY" -d '{"query": "query { pod(input: {id: \"'$POD_ID'\"}) { status } }"}')
            STATUS=$(echo "$RESPONSE" | jq -r '.data.pod.status // "ERROR"')
            echo "Pod status: $STATUS (Attempt $((COUNTER/30 + 1)))"
            if [ "$STATUS" = "FAILED" ] || [ "$STATUS" = "ERROR" ]; then
              echo "❌ Pod failed to start! Full response: $RESPONSE"
              exit 1
            fi
            sleep 30
            COUNTER=$((COUNTER + 30))
          done
          if [ "$STATUS" != "RUNNING" ]; then
            echo "❌ Timeout waiting for pod to start"
            exit 1
          fi
          echo "✅ Pod is running!"

      - name: Run Tests on Pod
        if: env.POD_ID != ''
        env:
          RUNPOD_API_KEY: ${{ secrets.RUNPOD_API_KEY }}
          POD_ID: ${{ env.POD_ID }}
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          RESPONSE=$(curl -X POST "https://api.runpod.io/graphql?api_key=$RUNPOD_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "query": "mutation { podExec(input: {podId: \"'$POD_ID'\", command: \"cd /app && python src/rp_handler.py --test_input=\\\"{\\\\\\\"input\\\\\\\": {\\\\\\\"prompt\\\\\\\": \\\\\\\"a majestic steampunk dragon soaring through a cloudy sky, intricate clockwork details, golden hour lighting, highly detailed\\\\\\\", \\\\\\\"negative_prompt\\\\\\\": \\\\\\\"blurry, very low quality, deformed, ugly, text, watermark, signature,\\\\\\\", \\\\\\\"height\\\\\\\": 1024, \\\\\\\"width\\\\\\\": 1024, \\\\\\\"num_inference_steps\\\\\\\": 25, \\\\\\\"refiner_inference_steps\\\\\\\": 50, \\\\\\\"guidance_scale\\\\\\\": 7.5, \\\\\\\"strength\\\\\\\": 0.3, \\\\\\\"high_noise_frac\\\\\\\": 0.8, \\\\\\\"seed\\\\\\\": 1337, \\\\\\\"scheduler\\\\\\\": \\\\\\\"K_EULER\\\\\\\", \\\\\\\"num_images\\\\\\\": 1, \\\\\\\"image_url\\\\\\\": null}}\\\"\", env: [{key: \"HF_TOKEN\", value: \"'$HF_TOKEN'\"}]}) { success stdout stderr } }"
            }')
          SUCCESS=$(echo "$RESPONSE" | jq -r '.data.podExec.success')
          STDOUT=$(echo "$RESPONSE" | jq -r '.data.podExec.stdout')
          STDERR=$(echo "$RESPONSE" | jq -r '.data.podExec.stderr')
          echo "Test stdout: $STDOUT"
          if [ "$SUCCESS" != "true" ]; then
            echo "❌ Test failed! stderr: $STDERR"
            exit 1
          fi
          echo "✅ Tests completed on pod."

      - name: Terminate Pod (Cleanup)
        if: always() && env.POD_ID != ''
        uses: fjogeleit/http-request-action@v1
        env:
          RUNPOD_API_KEY: ${{ secrets.RUNPOD_API_KEY }}
        with:
          url: https://api.runpod.io/graphql?api_key=${{ env.RUNPOD_API_KEY }}
          method: POST
          customHeaders: '{"Content-Type": "application/json"}'
          data: |
            {
              "query": "mutation { podTerminate(input: {id: \"${{ env.POD_ID }}\"}) { id status } }"
            }