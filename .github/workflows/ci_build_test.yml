name: CI | Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build -t dorfnew/ai-api-sdxl:dev .

      - name: Push Docker image (for main branch)
        if: github.ref == 'refs/heads/main'
        run: |
          docker push dorfnew/ai-api-sdxl:dev

      - name: Create and Start RunPod Pod
        id: pod
        uses: fjogeleit/http-request-action@v1
        env:
          RUNPOD_API_KEY: ${{ secrets.RUNPOD_API_KEY }}
        with:
          url: https://api.runpod.io/graphql
          method: POST
          customHeaders: '{"Content-Type": "application/json", "Authorization": "Bearer ${{ env.RUNPOD_API_KEY }}"}'
          data: |
            {
              "query": "mutation { podFindAndDeployOnDemand(input: {name: \"sdxl-test-pod-${{ github.run_id }}\", imageName: \"dorfnew/ai-api-sdxl:dev\", gpuCount: 1, gpuIds: \"NVIDIA GeForce RTX 4090\", containerDiskInGb: 80, ports: [\"8080/http\"], env: [{key: \"HF_TOKEN\", value: \"${{ secrets.HF_TOKEN }}\"}]}) { id status } }"
            }

      - name: Extract Pod ID
        id: extract
        run: |
          echo "POD_ID=$(echo '${{ steps.pod.outputs.response }}' | jq -r '.data.podFindAndDeployOnDemand.id')" >> $GITHUB_ENV

      - name: Wait for Pod to Start
        run: |
          POD_ID=${{ env.POD_ID }}
          RUNPOD_API_KEY=${{ secrets.RUNPOD_API_KEY }}
          STATUS="CREATING"
          while [ "$STATUS" != "RUNNING" ]; do
            STATUS=$(curl -s -H "Authorization: Bearer $RUNPOD_API_KEY" "https://api.runpod.io/graphql" -d '{"query": "query { pod(id: \"'$POD_ID'\") { status } }"}' | jq -r '.data.pod.status')
            echo "Pod status: $STATUS"
            if [ "$STATUS" = "FAILED" ]; then
              echo "Pod failed to start!"
              exit 1
            fi
            sleep 30
          done
          echo "Pod is running!"

      - name: Run Tests on Pod
        env:
          RUNPOD_API_KEY: ${{ secrets.RUNPOD_API_KEY }}
          POD_ID: ${{ env.POD_ID }}
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          # Exec command to run tests on the pod (assumes your main.py starts the server on boot, and rp_handler is in /app/src)
          curl -X POST "https://api.runpod.io/graphql" \
            -H "Authorization: Bearer $RUNPOD_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "query": "mutation { podExec(input: {podId: \"'$POD_ID'\", command: \"cd /app && python src/rp_handler.py --test_input=\\\"{\\\\\\\"input\\\\\\\": {\\\\\\\"prompt\\\\\\\": \\\\\\\"a majestic steampunk dragon soaring through a cloudy sky, intricate clockwork details, golden hour lighting, highly detailed\\\\\\\", \\\\\\\"negative_prompt\\\\\\\": \\\\\\\"blurry, very low quality, deformed, ugly, text, watermark, signature,\\\\\\\", \\\\\\\"height\\\\\\\": 1024, \\\\\\\"width\\\\\\\": 1024, \\\\\\\"num_inference_steps\\\\\\\": 25, \\\\\\\"refiner_inference_steps\\\\\\\": 50, \\\\\\\"guidance_scale\\\\\\\": 7.5, \\\\\\\"strength\\\\\\\": 0.3, \\\\\\\"high_noise_frac\\\\\\\": 0.8, \\\\\\\"seed\\\\\\\": 1337, \\\\\\\\"scheduler\\\\\\\": \\\\\\\"K_EULER\\\\\\\", \\\\\\\"num_images\\\\\\\": 1, \\\\\\\"image_url\\\\\\\": null}}\\\"\", env: [{key: \"HF_TOKEN\", value: \"'$HF_TOKEN'\"}]}) { success stdout stderr } }"
            '
          echo "Tests completed on pod."

      - name: Terminate Pod (Cleanup)
        if: always()
        uses: fjogeleit/http-request-action@v1
        env:
          RUNPOD_API_KEY: ${{ secrets.RUNPOD_API_KEY }}
        with:
          url: https://api.runpod.io/graphql
          method: POST
          customHeaders: '{"Content-Type": "application/json", "Authorization": "Bearer ${{ env.RUNPOD_API_KEY }}"}'
          data: |
            {
              "query": "mutation { podTerminate(input: {podId: \"${{ env.POD_ID }}\"}) { id status } }"
            }