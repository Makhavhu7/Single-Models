name: Deploy to RunPod Pod

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify API Key Permissions
        id: verify
        uses: fjogeleit/http-request-action@v1
        env:
          RUNPOD_API_KEY: ${{ secrets.RUNPOD_API_KEY }}
        with:
          url: https://api.runpod.io/graphql?api_key=${{ env.RUNPOD_API_KEY }}
          method: POST
          customHeaders: '{"Content-Type": "application/json"}'
          data: |
            {
              "query": "query { myself { id } }"
            }
        continue-on-error: false

      - name: Test Pod Mutation Access
        id: test-mutation
        uses: fjogeleit/http-request-action@v1
        env:
          RUNPOD_API_KEY: ${{ secrets.RUNPOD_API_KEY }}
        with:
          url: https://api.runpod.io/graphql?api_key=${{ env.RUNPOD_API_KEY }}
          method: POST
          customHeaders: '{"Content-Type": "application/json"}'
          data: |
            {
              "query": "mutation { podFindAndDeployOnDemand(input: { cloudType: SECURE, name: \"test-access\", gpuTypeId: \"NVIDIA GeForce RTX 4090\", imageName: \"nvidia/cuda:11.0-base\", gpuCount: 1, containerDiskInGb: 10, volumeInGb: 0, minVcpuCount: 2, minMemoryInGb: 8, ports: [{ privatePort: 8080, publicPort: 8080, type: \"http\" }], env: [] }) { id } }"
            }
        continue-on-error: true

      - name: Log Mutation Test Result (Debug)
        if: steps.test-mutation.outcome == 'failure'
        run: |
          echo "❌ Mutation test failed - Check API key scopes and response"
          echo "Response: ${{ steps.test-mutation.outputs.response }}"

      - name: Create and Start RunPod Pod
        id: pod
        if: steps.test-mutation.outcome == 'success'
        uses: fjogeleit/http-request-action@v1
        env:
          RUNPOD_API_KEY: ${{ secrets.RUNPOD_API_KEY }}
        with:
          url: https://api.runpod.io/graphql?api_key=${{ env.RUNPOD_API_KEY }}
          method: POST
          customHeaders: '{"Content-Type": "application/json"}'
          data: |
            {
              "query": "mutation { podFindAndDeployOnDemand(input: { cloudType: SECURE, name: \"sdxl-deploy-pod-${{ github.sha }}\", imageName: \"dorfnew/ai-api-sdxl:dev\", gpuCount: 1, gpuTypeId: \"NVIDIA GeForce RTX 4090\", containerDiskInGb: 80, volumeInGb: 0, minVcpuCount: 6, minMemoryInGb: 36, ports: [{ privatePort: 8080, publicPort: 8080, type: \"http\" }], env: [{ key: \"HF_TOKEN\", value: \"${{ secrets.HF_TOKEN }}\" }]) { id } }"
            }

      - name: Extract Pod ID and Public IP
        id: extract
        if: steps.pod.outcome == 'success'
        run: |
          POD_ID=$(echo '${{ steps.pod.outputs.response }}' | jq -r '.data.podFindAndDeployOnDemand.id')
          echo "POD_ID=$POD_ID" >> $GITHUB_ENV
          RESPONSE=$(echo '${{ steps.pod.outputs.response }}')
          if [[ "$RESPONSE" == *"errors"* ]]; then
            echo "❌ Pod creation failed: $RESPONSE"
            exit 1
          fi
          # Get public IP from pod details
          PORTS_RESPONSE=$(curl -s -H "Content-Type: application/json" "https://api.runpod.io/graphql?api_key=${{ env.RUNPOD_API_KEY }}" -d '{"query": "query { pod(input: {podId: \"'$POD_ID'\"}) { runtime { ports { ip isIpPublic publicPort } } } }"}')
          PUBLIC_IP=$(echo "$PORTS_RESPONSE" | jq -r '.data.pod.runtime.ports[]? | select(.isIpPublic == true) .ip // empty')
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      - name: Wait for Pod to Start
        if: env.POD_ID != ''
        run: |
          POD_ID="${{ env.POD_ID }}"
          RUNPOD_API_KEY="${{ secrets.RUNPOD_API_KEY }}"
          STATUS="CREATING"
          COUNTER=0
          MAX_WAIT=600
          while [ "$STATUS" != "RUNNING" ] && [ $COUNTER -lt $MAX_WAIT ]; do
            RESPONSE=$(curl -s -H "Content-Type: application/json" "https://api.runpod.io/graphql?api_key=$RUNPOD_API_KEY" -d '{"query": "query { pod(input: {podId: \"'$POD_ID'\"}) { status } }"}')
            STATUS=$(echo "$RESPONSE" | jq -r '.data.pod.status // "ERROR"')
            echo "Pod status: $STATUS (Attempt $((COUNTER/30 + 1)))"
            if [ "$STATUS" = "FAILED" ] || [ "$STATUS" = "ERROR" ]; then
              echo "❌ Pod failed to start! Full response: $RESPONSE"
              exit 1
            fi
            sleep 30
            COUNTER=$((COUNTER + 30))
          done
          if [ "$STATUS" != "RUNNING" ]; then
            echo "❌ Timeout waiting for pod to start"
            exit 1
          fi
          echo "✅ Pod is running! Access at http://${{ env.PUBLIC_IP }}:8080"

      - name: Output Pod Details
        if: env.POD_ID != ''
        run: |
          echo "✅ Deployment complete! Pod ID: ${{ env.POD_ID }}, Public IP: ${{ env.PUBLIC_IP }}:8080"
          echo "Check RunPod dashboard for logs/SSH. Server should be at /health."